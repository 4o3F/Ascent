// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.3.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

part 'bridge_definitions.freezed.dart';

abstract class Native {
  Future<void> writeData(
      {required String key, required String value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWriteDataConstMeta;

  Future<String> getData({required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetDataConstMeta;

  Future<int> countData({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCountDataConstMeta;

  Stream<Event> registerEventListener({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterEventListenerConstMeta;

  Future<void> createEvent(
      {required String address, required String payload, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateEventConstMeta;

  Future<int> getListenerCount({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetListenerCountConstMeta;

  Future<String> asStringMethodEvent({required Event that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAsStringMethodEventConstMeta;
}

@freezed
class Event with _$Event {
  const Event._();
  const factory Event({
    required Native bridge,
    required String address,
    required String payload,
  }) = _Event;
  Future<String> asString({dynamic hint}) => bridge.asStringMethodEvent(
        that: this,
      );
}
